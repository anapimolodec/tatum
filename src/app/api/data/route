import { NextResponse } from "next/server";
import path from "path";
import { promises as fs } from "fs";

async function readJsonFile(filename) {
  try {
    const dataPath = path.join(process.cwd(), "data", filename);
    console.log(`[DEBUG] Attempting to read: ${dataPath}`);

    // Check if directory exists
    const dirPath = path.join(process.cwd(), "data");
    try {
      const dirContents = await fs.readdir(dirPath);
      console.log(`[DEBUG] Files in data directory:`, dirContents);
    } catch (err) {
      console.error(`[DEBUG] Error reading directory:`, err);
    }

    // Check if file exists
    try {
      await fs.access(dataPath);
      console.log(`[DEBUG] File exists: ${filename}`);
    } catch (err) {
      console.error(`[DEBUG] File not found: ${filename}`);
      throw new Error(`File not found: ${filename}`);
    }

    // Read file
    const data = await fs.readFile(dataPath, "utf8");
    console.log(`[DEBUG] File content length: ${data.length} bytes`);

    // Parse JSON
    try {
      const parsed = JSON.parse(data);
      console.log(
        `[DEBUG] Successfully parsed JSON. Type:`,
        Array.isArray(parsed) ? "array" : typeof parsed
      );
      return parsed;
    } catch (err) {
      console.error(`[DEBUG] JSON parse error:`, err);
      throw new Error(`Invalid JSON in ${filename}`);
    }
  } catch (error) {
    console.error(`[DEBUG] Error in readJsonFile:`, error);
    throw error;
  }
}

export async function GET(request) {
  console.log("\n=== API Route: /api/data ===");

  try {
    const { searchParams } = new URL(request.url);
    const type = searchParams.get("type");
    console.log("[DEBUG] Request type:", type);
    console.log("[DEBUG] Current working directory:", process.cwd());

    switch (type) {
      case "users":
        console.log("[DEBUG] Fetching users...");
        const users = await readJsonFile("user_list.json");
        console.log("[DEBUG] Users fetched successfully");
        return NextResponse.json(users);

      case "tasks":
        console.log("[DEBUG] Fetching tasks...");
        const tasks = await readJsonFile("task_list.json");
        console.log("[DEBUG] Tasks fetched successfully");
        return NextResponse.json(tasks);

      default:
        console.log("[DEBUG] Invalid type:", type);
        return NextResponse.json(
          { error: "Invalid data type requested" },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error("[DEBUG] Error in API route:", error);
    return NextResponse.json(
      {
        error: `Failed to fetch ${type || "data"}`,
        details:
          process.env.NODE_ENV === "development" ? error.message : undefined,
        path:
          process.env.NODE_ENV === "development"
            ? path.join(process.cwd(), "data")
            : undefined,
      },
      { status: 500 }
    );
  }
}
